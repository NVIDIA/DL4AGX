diff --git a/TensorRT/plugin/grid_sampler/gridSamplerKernel.cu b/TensorRT/plugin/grid_sampler/gridSamplerKernel.cu
index 4cd713f..f3c7be8 100644
--- a/TensorRT/plugin/grid_sampler/gridSamplerKernel.cu
+++ b/TensorRT/plugin/grid_sampler/gridSamplerKernel.cu
@@ -1922,7 +1922,7 @@ __global__ void grid_sampler_3d_kernel(
   }
 }
 
-void create_desc(const int *dims, int nb_dims, TensorDesc &desc) {
+void create_desc(const TRT_INT_TYPE *dims, int nb_dims, TensorDesc &desc) {
   memcpy(&desc.shape[0], dims, sizeof(int) * nb_dims);
   desc.stride[nb_dims - 1] = 1;
   for (int i = nb_dims - 2; i >= 0; --i) {
@@ -1931,8 +1931,8 @@ void create_desc(const int *dims, int nb_dims, TensorDesc &desc) {
 }
 
 template <typename T>
-void grid_sample(T *output, const T *input, const T *grid, int *output_dims,
-                 int *input_dims, int *grid_dims, int nb_dims,
+void grid_sample(T *output, const T *input, const T *grid, TRT_INT_TYPE *output_dims,
+                 TRT_INT_TYPE *input_dims, TRT_INT_TYPE *grid_dims, int nb_dims,
                  GridSamplerInterpolation interp, GridSamplerPadding padding,
                  bool align_corners, cudaStream_t stream) {
   TensorDesc input_desc;
@@ -1969,7 +1969,7 @@ void grid_sample(T *output, const T *input, const T *grid, int *output_dims,
 
 template <>
 void grid_sample(__half2 *output, const __half2 *input, const __half2 *grid,
-                 int *output_dims, int *input_dims, int *grid_dims, int nb_dims,
+                 TRT_INT_TYPE *output_dims, TRT_INT_TYPE *input_dims, TRT_INT_TYPE *grid_dims, int nb_dims,
                  GridSamplerInterpolation interp, GridSamplerPadding padding,
                  bool align_corners, cudaStream_t stream) {
   TensorDesc input_desc;
@@ -2009,8 +2009,8 @@ void grid_sample(__half2 *output, const __half2 *input, const __half2 *grid,
 
 void grid_sample_int8(int8_4 *output, const float &scale_o, const int8_4 *input,
                       const float &scale_i, const int8_4 *grid,
-                      const float &scale_g, int *output_dims, int *input_dims,
-                      int *grid_dims, int nb_dims,
+                      const float &scale_g, TRT_INT_TYPE *output_dims, TRT_INT_TYPE *input_dims,
+                      TRT_INT_TYPE *grid_dims, int nb_dims,
                       GridSamplerInterpolation interp,
                       GridSamplerPadding padding, bool align_corners,
                       cudaStream_t stream) {
@@ -2043,22 +2043,22 @@ void grid_sample_int8(int8_4 *output, const float &scale_o, const int8_4 *input,
 }
 
 template void grid_sample<float>(float *output, const float *input,
-                                 const float *grid, int *output_dims,
-                                 int *input_dims, int *grid_dims, int nb_dims,
+                                 const float *grid, TRT_INT_TYPE *output_dims,
+                                 TRT_INT_TYPE *input_dims, TRT_INT_TYPE *grid_dims, int nb_dims,
                                  GridSamplerInterpolation interp,
                                  GridSamplerPadding padding, bool align_corners,
                                  cudaStream_t stream);
 
 template void grid_sample<__half>(__half *output, const __half *input,
-                                  const __half *grid, int *output_dims,
-                                  int *input_dims, int *grid_dims, int nb_dims,
+                                  const __half *grid, TRT_INT_TYPE *output_dims,
+                                  TRT_INT_TYPE *input_dims, TRT_INT_TYPE *grid_dims, int nb_dims,
                                   GridSamplerInterpolation interp,
                                   GridSamplerPadding padding,
                                   bool align_corners, cudaStream_t stream);
 
 template void grid_sample<__half2>(__half2 *output, const __half2 *input,
-                                   const __half2 *grid, int *output_dims,
-                                   int *input_dims, int *grid_dims, int nb_dims,
+                                   const __half2 *grid, TRT_INT_TYPE *output_dims,
+                                   TRT_INT_TYPE *input_dims, TRT_INT_TYPE *grid_dims, int nb_dims,
                                    GridSamplerInterpolation interp,
                                    GridSamplerPadding padding,
                                    bool align_corners, cudaStream_t stream);
diff --git a/TensorRT/plugin/grid_sampler/gridSamplerKernel.h b/TensorRT/plugin/grid_sampler/gridSamplerKernel.h
index 0a913c1..321e167 100644
--- a/TensorRT/plugin/grid_sampler/gridSamplerKernel.h
+++ b/TensorRT/plugin/grid_sampler/gridSamplerKernel.h
@@ -7,20 +7,25 @@
 
 #include "cuda_int8.h"
 #include <cuda_runtime.h>
+#include <cuda_runtime_api.h>
+#include <type_traits>
+#include <NvInfer.h>
+
+typedef std::conditional<NV_TENSORRT_MAJOR<10, int, int64_t>::type TRT_INT_TYPE;
 
 enum class GridSamplerInterpolation { Bilinear, Nearest, Bicubic };
 enum class GridSamplerPadding { Zeros, Border, Reflection };
 
 template <typename T>
-void grid_sample(T *output, const T *input, const T *grid, int *output_dims,
-                 int *input_dims, int *grid_dims, int nb_dims,
+void grid_sample(T *output, const T *input, const T *grid, TRT_INT_TYPE *output_dims,
+                 TRT_INT_TYPE *input_dims, TRT_INT_TYPE *grid_dims, int nb_dims,
                  GridSamplerInterpolation interp, GridSamplerPadding padding,
                  bool align_corners, cudaStream_t stream);
 
 void grid_sample_int8(int8_4 *output, const float &scale_o, const int8_4 *input,
                       const float &scale_i, const int8_4 *grid,
-                      const float &scale_g, int *output_dims, int *input_dims,
-                      int *grid_dims, int nb_dims,
+                      const float &scale_g, TRT_INT_TYPE *output_dims, TRT_INT_TYPE *input_dims,
+                      TRT_INT_TYPE *grid_dims, int nb_dims,
                       GridSamplerInterpolation interp,
                       GridSamplerPadding padding, bool align_corners,
                       cudaStream_t stream);
diff --git a/TensorRT/plugin/rotate/rotateKernel.cu b/TensorRT/plugin/rotate/rotateKernel.cu
index 379b7cc..71e1f9f 100644
--- a/TensorRT/plugin/rotate/rotateKernel.cu
+++ b/TensorRT/plugin/rotate/rotateKernel.cu
@@ -706,7 +706,7 @@ __global__ void rotateKernel_int8(const int nthreads, int8_4 *output,
 }
 
 template <typename T>
-void rotate(T *output, T *input, T *angle, T *center, int *input_dims,
+void rotate(T *output, T *input, T *angle, T *center, TRT_INT_TYPE *input_dims,
             RotateInterpolation interp, cudaStream_t stream) {
   int channel = input_dims[0];
   int height = input_dims[1];
@@ -719,7 +719,7 @@ void rotate(T *output, T *input, T *angle, T *center, int *input_dims,
 }
 
 void rotate_h2(__half2 *output, __half2 *input, __half *angle, __half *center,
-               int *input_dims, RotateInterpolation interp,
+               TRT_INT_TYPE *input_dims, RotateInterpolation interp,
                cudaStream_t stream) {
   int channel = input_dims[0];
   int height = input_dims[1];
@@ -734,7 +734,7 @@ void rotate_h2(__half2 *output, __half2 *input, __half *angle, __half *center,
 template <typename T>
 void rotate_int8(int8_4 *output, float scale_o, const int8_4 *input,
                  float scale_i, const T *angle, const T *center,
-                 int *input_dims, RotateInterpolation interp,
+                 TRT_INT_TYPE *input_dims, RotateInterpolation interp,
                  cudaStream_t stream) {
   int channel = input_dims[0];
   int height = input_dims[1];
@@ -748,19 +748,19 @@ void rotate_int8(int8_4 *output, float scale_o, const int8_4 *input,
 }
 
 template void rotate(float *output, float *input, float *angle, float *center,
-                     int *input_dims, RotateInterpolation interp,
+                     TRT_INT_TYPE *input_dims, RotateInterpolation interp,
                      cudaStream_t stream);
 
 template void rotate(__half *output, __half *input, __half *angle,
-                     __half *center, int *input_dims,
+                     __half *center, TRT_INT_TYPE *input_dims,
                      RotateInterpolation interp, cudaStream_t stream);
 
 template void rotate_int8(int8_4 *output, float scale_o, const int8_4 *input,
                           float scale_i, const float *angle,
-                          const float *center, int *input_dims,
+                          const float *center, TRT_INT_TYPE *input_dims,
                           RotateInterpolation interp, cudaStream_t stream);
 
 template void rotate_int8(int8_4 *output, float scale_o, const int8_4 *input,
                           float scale_i, const __half *angle,
-                          const __half *center, int *input_dims,
+                          const __half *center, TRT_INT_TYPE *input_dims,
                           RotateInterpolation interp, cudaStream_t stream);
diff --git a/TensorRT/plugin/rotate/rotateKernel.h b/TensorRT/plugin/rotate/rotateKernel.h
index d5808b9..e8f7030 100644
--- a/TensorRT/plugin/rotate/rotateKernel.h
+++ b/TensorRT/plugin/rotate/rotateKernel.h
@@ -8,21 +8,26 @@
 #include "cuda_int8.h"
 #include <cuda_fp16.h>
 #include <cuda_runtime.h>
+#include <NvInfer.h>
+#include <cuda_runtime_api.h>
+#include <type_traits>
+
+typedef std::conditional<NV_TENSORRT_MAJOR<10, int, int64_t>::type TRT_INT_TYPE;
 
 enum class RotateInterpolation { Bilinear, Nearest };
 
 template <typename T>
-void rotate(T *output, T *input, T *angle, T *center, int *input_dims,
+void rotate(T *output, T *input, T *angle, T *center, TRT_INT_TYPE *input_dims,
             RotateInterpolation interp, cudaStream_t stream);
 
 void rotate_h2(__half2 *output, __half2 *input, __half *angle, __half *center,
-               int *input_dims, RotateInterpolation interp,
+               TRT_INT_TYPE *input_dims, RotateInterpolation interp,
                cudaStream_t stream);
 
 template <typename T>
 void rotate_int8(int8_4 *output, float scale_o, const int8_4 *input,
                  float scale_i, const T *angle, const T *center,
-                 int *input_dims, RotateInterpolation interp,
+                 TRT_INT_TYPE *input_dims, RotateInterpolation interp,
                  cudaStream_t stream);
 
 #endif // TENSORRT_OPS_ROTATEKERNEL_H
diff --git a/det2trt/convert/pytorch2onnx.py b/det2trt/convert/pytorch2onnx.py
index 978e544..0cd9282 100644
--- a/det2trt/convert/pytorch2onnx.py
+++ b/det2trt/convert/pytorch2onnx.py
@@ -62,8 +62,8 @@ def pytorch2onnx(
         input_names=input_name,
         output_names=output_name,
         export_params=True,
-        keep_initializers_as_inputs=True,
-        do_constant_folding=False,
+        keep_initializers_as_inputs=False,
+        do_constant_folding=True,
         verbose=verbose,
         opset_version=opset_version,
         dynamic_axes=dynamic_axes,
