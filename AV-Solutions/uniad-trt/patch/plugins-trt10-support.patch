diff --git a/TensorRT/plugin/grid_sampler/gridSamplerKernel.cu b/TensorRT/plugin/grid_sampler/gridSamplerKernel.cu
index 4cd713f..460e34f 100644
--- a/TensorRT/plugin/grid_sampler/gridSamplerKernel.cu
+++ b/TensorRT/plugin/grid_sampler/gridSamplerKernel.cu
@@ -1922,8 +1922,9 @@ __global__ void grid_sampler_3d_kernel(
   }
 }
 
-void create_desc(const int *dims, int nb_dims, TensorDesc &desc) {
-  memcpy(&desc.shape[0], dims, sizeof(int) * nb_dims);
+void create_desc(const TRT_INT_TYPE *dims, int nb_dims, TensorDesc &desc) {
+  // memcpy(&desc.shape[0], dims, sizeof(int) * nb_dims);
+  for (size_t dim_id=0; dim_id<nb_dims; ++dim_id) desc.shape[dim_id] = (int) dims[dim_id];
   desc.stride[nb_dims - 1] = 1;
   for (int i = nb_dims - 2; i >= 0; --i) {
     desc.stride[i] = desc.stride[i + 1] * desc.shape[i + 1];
@@ -1931,8 +1932,8 @@ void create_desc(const int *dims, int nb_dims, TensorDesc &desc) {
 }
 
 template <typename T>
-void grid_sample(T *output, const T *input, const T *grid, int *output_dims,
-                 int *input_dims, int *grid_dims, int nb_dims,
+void grid_sample(T *output, const T *input, const T *grid, TRT_INT_TYPE *output_dims,
+                 TRT_INT_TYPE *input_dims, TRT_INT_TYPE *grid_dims, int nb_dims,
                  GridSamplerInterpolation interp, GridSamplerPadding padding,
                  bool align_corners, cudaStream_t stream) {
   TensorDesc input_desc;
@@ -1969,7 +1970,7 @@ void grid_sample(T *output, const T *input, const T *grid, int *output_dims,
 
 template <>
 void grid_sample(__half2 *output, const __half2 *input, const __half2 *grid,
-                 int *output_dims, int *input_dims, int *grid_dims, int nb_dims,
+                 TRT_INT_TYPE *output_dims, TRT_INT_TYPE *input_dims, TRT_INT_TYPE *grid_dims, int nb_dims,
                  GridSamplerInterpolation interp, GridSamplerPadding padding,
                  bool align_corners, cudaStream_t stream) {
   TensorDesc input_desc;
@@ -2009,8 +2010,8 @@ void grid_sample(__half2 *output, const __half2 *input, const __half2 *grid,
 
 void grid_sample_int8(int8_4 *output, const float &scale_o, const int8_4 *input,
                       const float &scale_i, const int8_4 *grid,
-                      const float &scale_g, int *output_dims, int *input_dims,
-                      int *grid_dims, int nb_dims,
+                      const float &scale_g, TRT_INT_TYPE *output_dims, TRT_INT_TYPE *input_dims,
+                      TRT_INT_TYPE *grid_dims, int nb_dims,
                       GridSamplerInterpolation interp,
                       GridSamplerPadding padding, bool align_corners,
                       cudaStream_t stream) {
@@ -2043,22 +2044,22 @@ void grid_sample_int8(int8_4 *output, const float &scale_o, const int8_4 *input,
 }
 
 template void grid_sample<float>(float *output, const float *input,
-                                 const float *grid, int *output_dims,
-                                 int *input_dims, int *grid_dims, int nb_dims,
+                                 const float *grid, TRT_INT_TYPE *output_dims,
+                                 TRT_INT_TYPE *input_dims, TRT_INT_TYPE *grid_dims, int nb_dims,
                                  GridSamplerInterpolation interp,
                                  GridSamplerPadding padding, bool align_corners,
                                  cudaStream_t stream);
 
 template void grid_sample<__half>(__half *output, const __half *input,
-                                  const __half *grid, int *output_dims,
-                                  int *input_dims, int *grid_dims, int nb_dims,
+                                  const __half *grid, TRT_INT_TYPE *output_dims,
+                                  TRT_INT_TYPE *input_dims, TRT_INT_TYPE *grid_dims, int nb_dims,
                                   GridSamplerInterpolation interp,
                                   GridSamplerPadding padding,
                                   bool align_corners, cudaStream_t stream);
 
 template void grid_sample<__half2>(__half2 *output, const __half2 *input,
-                                   const __half2 *grid, int *output_dims,
-                                   int *input_dims, int *grid_dims, int nb_dims,
+                                   const __half2 *grid, TRT_INT_TYPE *output_dims,
+                                   TRT_INT_TYPE *input_dims, TRT_INT_TYPE *grid_dims, int nb_dims,
                                    GridSamplerInterpolation interp,
                                    GridSamplerPadding padding,
                                    bool align_corners, cudaStream_t stream);
diff --git a/TensorRT/plugin/grid_sampler/gridSamplerKernel.h b/TensorRT/plugin/grid_sampler/gridSamplerKernel.h
index 0a913c1..fed4d3f 100644
--- a/TensorRT/plugin/grid_sampler/gridSamplerKernel.h
+++ b/TensorRT/plugin/grid_sampler/gridSamplerKernel.h
@@ -7,20 +7,24 @@
 
 #include "cuda_int8.h"
 #include <cuda_runtime.h>
+#include <type_traits>
+#include <NvInfer.h>
+
+typedef std::conditional<NV_TENSORRT_MAJOR<10, int, int64_t>::type TRT_INT_TYPE;
 
 enum class GridSamplerInterpolation { Bilinear, Nearest, Bicubic };
 enum class GridSamplerPadding { Zeros, Border, Reflection };
 
 template <typename T>
-void grid_sample(T *output, const T *input, const T *grid, int *output_dims,
-                 int *input_dims, int *grid_dims, int nb_dims,
+void grid_sample(T *output, const T *input, const T *grid, TRT_INT_TYPE *output_dims,
+                 TRT_INT_TYPE *input_dims, TRT_INT_TYPE *grid_dims, int nb_dims,
                  GridSamplerInterpolation interp, GridSamplerPadding padding,
                  bool align_corners, cudaStream_t stream);
 
 void grid_sample_int8(int8_4 *output, const float &scale_o, const int8_4 *input,
                       const float &scale_i, const int8_4 *grid,
-                      const float &scale_g, int *output_dims, int *input_dims,
-                      int *grid_dims, int nb_dims,
+                      const float &scale_g, TRT_INT_TYPE *output_dims, TRT_INT_TYPE *input_dims,
+                      TRT_INT_TYPE *grid_dims, int nb_dims,
                       GridSamplerInterpolation interp,
                       GridSamplerPadding padding, bool align_corners,
                       cudaStream_t stream);
diff --git a/TensorRT/plugin/inverse/inversePlugin.cpp b/TensorRT/plugin/inverse/inversePlugin.cpp
index f68009c..42421d1 100644
--- a/TensorRT/plugin/inverse/inversePlugin.cpp
+++ b/TensorRT/plugin/inverse/inversePlugin.cpp
@@ -59,6 +59,9 @@ int32_t InversePlugin::enqueue(const nvinfer1::PluginTensorDesc *inputDesc,
                                const nvinfer1::PluginTensorDesc *outputDesc,
                                const void *const *inputs, void *const *outputs,
                                void *workspace, cudaStream_t stream) noexcept {
+  #if NV_TENSORRT_MAJOR >= 10 && NV_TENSORRT_MINOR >= 4
+    cublasSetStream(m_cublas_handle, stream);
+  #endif
   auto data_type = inputDesc[0].type;
   switch (data_type) {
   case DataType::kFLOAT:
@@ -103,6 +106,9 @@ IPluginV2DynamicExt *InversePlugin::clone() const noexcept {
     auto *plugin = new InversePlugin();
     plugin->setPluginNamespace(mPluginNamespace.c_str());
     plugin->initialize();
+    #if NV_TENSORRT_MAJOR >= 10 && NV_TENSORRT_MINOR >= 4
+      plugin->m_cublas_handle = m_cublas_handle;
+    #endif
     return plugin;
   } catch (std::exception const &e) {
     caughtError(e);
@@ -128,7 +134,11 @@ DataType InversePlugin::getOutputDataType(int32_t index,
 void InversePlugin::attachToContext(
     cudnnContext *cudnn, cublasContext *cublas,
     nvinfer1::IGpuAllocator *allocator) noexcept {
-  m_cublas_handle = cublas;
+  #if NV_TENSORRT_MAJOR >= 10 && NV_TENSORRT_MINOR >= 4
+    cublasCreate(&m_cublas_handle);
+  #else
+    m_cublas_handle = cublas;
+  #endif
 }
 
 void InversePlugin::detachFromContext() noexcept {}
diff --git a/TensorRT/plugin/modulated_deformable_conv2d/modulatedDeformableConv2dPlugin.cpp b/TensorRT/plugin/modulated_deformable_conv2d/modulatedDeformableConv2dPlugin.cpp
index 0494a8f..b92ca0e 100644
--- a/TensorRT/plugin/modulated_deformable_conv2d/modulatedDeformableConv2dPlugin.cpp
+++ b/TensorRT/plugin/modulated_deformable_conv2d/modulatedDeformableConv2dPlugin.cpp
@@ -66,7 +66,11 @@ DimsExprs ModulatedDeformableConv2dPlugin::getOutputDimensions(
   return outputDim;
 }
 
-int32_t ModulatedDeformableConv2dPlugin::initialize() noexcept { return 0; }
+int32_t ModulatedDeformableConv2dPlugin::initialize() noexcept { 
+#if NV_TENSORRT_MAJOR >= 10 && NV_TENSORRT_MINOR >= 4
+#endif
+  return 0; 
+}
 
 void ModulatedDeformableConv2dPlugin::terminate() noexcept {}
 
@@ -118,6 +122,9 @@ int32_t ModulatedDeformableConv2dPlugin::enqueue(
     const nvinfer1::PluginTensorDesc *inputDesc,
     const nvinfer1::PluginTensorDesc *outputDesc, const void *const *inputs,
     void *const *outputs, void *workSpace, cudaStream_t stream) noexcept {
+#if NV_TENSORRT_MAJOR >= 10 && NV_TENSORRT_MINOR >= 4
+  cublasSetStream(m_cublas_handle, stream);
+#endif
   int batch = inputDesc[0].dims.d[0];
   int channels = inputDesc[0].dims.d[1];
   int height = inputDesc[0].dims.d[2];
@@ -286,7 +293,11 @@ DataType ModulatedDeformableConv2dPlugin::getOutputDataType(
 void ModulatedDeformableConv2dPlugin::attachToContext(
     cudnnContext *cudnn, cublasContext *cublas,
     nvinfer1::IGpuAllocator *allocator) noexcept {
+#if NV_TENSORRT_MAJOR >= 10 && NV_TENSORRT_MINOR >= 4
+  cublasCreate(&m_cublas_handle);
+#else
   m_cublas_handle = cublas;
+#endif
 }
 
 void ModulatedDeformableConv2dPlugin::detachFromContext() noexcept {}
diff --git a/TensorRT/plugin/multi_scale_deformable_attn/multiScaleDeformableAttnKernel.cu b/TensorRT/plugin/multi_scale_deformable_attn/multiScaleDeformableAttnKernel.cu
index e1a70ac..3bd468a 100644
--- a/TensorRT/plugin/multi_scale_deformable_attn/multiScaleDeformableAttnKernel.cu
+++ b/TensorRT/plugin/multi_scale_deformable_attn/multiScaleDeformableAttnKernel.cu
@@ -610,7 +610,7 @@ __device__ void ms_deform_attn_im2col_bilinear_int8_h2_(
 
 template <typename scalar_t>
 __global__ void ms_deformable_im2col_gpu_kernel(
-    const int n, const scalar_t *data_value, const int32_t *data_spatial_shapes,
+    const int n, const scalar_t *data_value, const TRT_INT *data_spatial_shapes,
     const scalar_t *data_reference_points,
     const scalar_t *data_sampling_offsets, const scalar_t *data_attn_weight,
     const int spatial_size, const int num_heads, const int channels,
@@ -689,7 +689,7 @@ __global__ void ms_deformable_im2col_gpu_kernel(
 
 template <>
 __global__ void ms_deformable_im2col_gpu_kernel(
-    const int n, const __half *data_value, const int32_t *data_spatial_shapes,
+    const int n, const __half *data_value, const TRT_INT *data_spatial_shapes,
     const __half *data_reference_points, const __half *data_sampling_offsets,
     const __half *data_attn_weight, const int spatial_size, const int num_heads,
     const int channels, const int num_levels, const int num_query,
@@ -770,7 +770,7 @@ __global__ void ms_deformable_im2col_gpu_kernel(
 }
 
 __global__ void ms_deformable_im2col_gpu_kernel_h2(
-    const int n, const __half2 *data_value, const int32_t *data_spatial_shapes,
+    const int n, const __half2 *data_value, const TRT_INT *data_spatial_shapes,
     const __half2 *data_reference_points, const __half2 *data_sampling_offsets,
     const __half *data_attn_weight, const int spatial_size, const int num_heads,
     const int channels, const int num_levels, const int num_query,
@@ -848,7 +848,7 @@ __global__ void ms_deformable_im2col_gpu_kernel_h2(
 template <typename scalar_t>
 __global__ void ms_deformable_im2col_gpu_kernel_int8(
     const int n, const int8_4 *data_value, float scale_value,
-    const int32_t *data_spatial_shapes, const scalar_t *data_reference_points,
+    const TRT_INT *data_spatial_shapes, const scalar_t *data_reference_points,
     const int8_4 *data_sampling_offsets, float scale_offset,
     const int8_4 *data_attn_weight, float scale_weight, const int spatial_size,
     const int num_heads, const int channels, const int num_levels,
@@ -957,7 +957,7 @@ __global__ void ms_deformable_im2col_gpu_kernel_int8(
 template <>
 __global__ void ms_deformable_im2col_gpu_kernel_int8(
     const int n, const int8_4 *data_value, float scale_value,
-    const int32_t *data_spatial_shapes, const __half2 *data_reference_points,
+    const TRT_INT *data_spatial_shapes, const __half2 *data_reference_points,
     const int8_4 *data_sampling_offsets, float scale_offset,
     const int8_4 *data_attn_weight, float scale_weight, const int spatial_size,
     const int num_heads, const int channels, const int num_levels,
@@ -1105,7 +1105,7 @@ __global__ void ms_deformable_im2col_gpu_kernel_int8(
 
 template <typename scalar_t>
 void ms_deformable_im2col_cuda(const scalar_t *data_value,
-                               const int32_t *data_spatial_shapes,
+                               const TRT_INT *data_spatial_shapes,
                                const scalar_t *data_reference_points,
                                const scalar_t *data_sampling_offsets,
                                const scalar_t *data_attn_weight,
@@ -1129,7 +1129,7 @@ void ms_deformable_im2col_cuda(const scalar_t *data_value,
 
 template <>
 void ms_deformable_im2col_cuda(
-    const __half *data_value, const int32_t *data_spatial_shapes,
+    const __half *data_value, const TRT_INT *data_spatial_shapes,
     const __half *data_reference_points, const __half *data_sampling_offsets,
     const __half *data_attn_weight, const int batch_size,
     const int spatial_size, const int num_heads, const int channels,
@@ -1149,7 +1149,7 @@ void ms_deformable_im2col_cuda(
 }
 
 void ms_deformable_im2col_cuda_h2(
-    const __half2 *data_value, const int32_t *data_spatial_shapes,
+    const __half2 *data_value, const TRT_INT *data_spatial_shapes,
     const __half2 *data_reference_points, const __half2 *data_sampling_offsets,
     const __half *data_attn_weight, const int batch_size,
     const int spatial_size, const int num_heads, int channels,
@@ -1171,7 +1171,7 @@ void ms_deformable_im2col_cuda_h2(
 template <typename scalar_t>
 void ms_deformable_im2col_cuda_int8(
     const int8_4 *data_value, float scale_value,
-    const int32_t *data_spatial_shapes, const scalar_t *data_reference_points,
+    const TRT_INT *data_spatial_shapes, const scalar_t *data_reference_points,
     const int8_4 *data_sampling_offsets, float scale_offset,
     const int8_4 *data_attn_weight, float scale_weight, const int batch_size,
     const int spatial_size, const int num_heads, int channels,
@@ -1196,7 +1196,7 @@ void ms_deformable_im2col_cuda_int8(
 template <>
 void ms_deformable_im2col_cuda_int8(
     const int8_4 *data_value, float scale_value,
-    const int32_t *data_spatial_shapes, const __half2 *data_reference_points,
+    const TRT_INT *data_spatial_shapes, const __half2 *data_reference_points,
     const int8_4 *data_sampling_offsets, float scale_offset,
     const int8_4 *data_attn_weight, float scale_weight, const int batch_size,
     const int spatial_size, const int num_heads, int channels,
@@ -1218,7 +1218,7 @@ void ms_deformable_im2col_cuda_int8(
 }
 
 template void ms_deformable_im2col_cuda<float>(
-    const float *data_value, const int32_t *data_spatial_shapes,
+    const float *data_value, const TRT_INT *data_spatial_shapes,
     const float *data_reference_points, const float *data_sampling_offsets,
     const float *data_attn_weight, const int batch_size, const int spatial_size,
     const int num_heads, const int channels, const int num_levels,
@@ -1226,7 +1226,7 @@ template void ms_deformable_im2col_cuda<float>(
     float *data_col, cudaStream_t stream);
 
 template void ms_deformable_im2col_cuda<__half>(
-    const __half *data_value, const int32_t *data_spatial_shapes,
+    const __half *data_value, const TRT_INT *data_spatial_shapes,
     const __half *data_reference_points, const __half *data_sampling_offsets,
     const __half *data_attn_weight, const int batch_size,
     const int spatial_size, const int num_heads, const int channels,
@@ -1235,7 +1235,7 @@ template void ms_deformable_im2col_cuda<__half>(
 
 template void ms_deformable_im2col_cuda_int8<float>(
     const int8_4 *data_value, float scale_value,
-    const int32_t *data_spatial_shapes, const float *data_reference_points,
+    const TRT_INT *data_spatial_shapes, const float *data_reference_points,
     const int8_4 *data_sampling_offsets, float scale_offset,
     const int8_4 *data_attn_weight, float scale_weight, const int batch_size,
     const int spatial_size, const int num_heads, int channels,
@@ -1245,7 +1245,7 @@ template void ms_deformable_im2col_cuda_int8<float>(
 
 template void ms_deformable_im2col_cuda_int8<__half2>(
     const int8_4 *data_value, float scale_value,
-    const int32_t *data_spatial_shapes, const __half2 *data_reference_points,
+    const TRT_INT *data_spatial_shapes, const __half2 *data_reference_points,
     const int8_4 *data_sampling_offsets, float scale_offset,
     const int8_4 *data_attn_weight, float scale_weight, const int batch_size,
     const int spatial_size, const int num_heads, int channels,
diff --git a/TensorRT/plugin/multi_scale_deformable_attn/multiScaleDeformableAttnKernel.h b/TensorRT/plugin/multi_scale_deformable_attn/multiScaleDeformableAttnKernel.h
index 78785d1..3df27e5 100644
--- a/TensorRT/plugin/multi_scale_deformable_attn/multiScaleDeformableAttnKernel.h
+++ b/TensorRT/plugin/multi_scale_deformable_attn/multiScaleDeformableAttnKernel.h
@@ -8,10 +8,12 @@
 #include "cuda_int8.h"
 #include <cuda_fp16.h>
 #include <cuda_runtime.h>
+#include <type_traits>
+typedef std::conditional<NV_TENSORRT_MAJOR<10, int32_t, int64_t>::type TRT_INT;
 
 template <typename T>
 void ms_deformable_im2col_cuda(
-    const T *data_value, const int32_t *data_spatial_shapes,
+    const T *data_value, const TRT_INT *data_spatial_shapes,
     const T *data_reference_points, const T *data_sampling_offsets,
     const T *data_attn_weight, const int batch_size, const int spatial_size,
     const int num_heads, const int channels, const int num_levels,
@@ -19,7 +21,7 @@ void ms_deformable_im2col_cuda(
     T *data_col, cudaStream_t stream);
 
 void ms_deformable_im2col_cuda_h2(
-    const __half2 *data_value, const int32_t *data_spatial_shapes,
+    const __half2 *data_value, const TRT_INT *data_spatial_shapes,
     const __half2 *data_reference_points, const __half2 *data_sampling_offsets,
     const __half *data_attn_weight, const int batch_size,
     const int spatial_size, const int num_heads, int channels,
@@ -29,7 +31,7 @@ void ms_deformable_im2col_cuda_h2(
 template <typename T>
 void ms_deformable_im2col_cuda_int8(
     const int8_4 *data_value, float scale_value,
-    const int32_t *data_spatial_shapes, const T *data_reference_points,
+    const TRT_INT *data_spatial_shapes, const T *data_reference_points,
     const int8_4 *data_sampling_offsets, float scale_offset,
     const int8_4 *data_attn_weight, float scale_weight, const int batch_size,
     const int spatial_size, const int num_heads, int channels,
diff --git a/TensorRT/plugin/multi_scale_deformable_attn/multiScaleDeformableAttnPlugin.cpp b/TensorRT/plugin/multi_scale_deformable_attn/multiScaleDeformableAttnPlugin.cpp
index 67886e0..5c88400 100644
--- a/TensorRT/plugin/multi_scale_deformable_attn/multiScaleDeformableAttnPlugin.cpp
+++ b/TensorRT/plugin/multi_scale_deformable_attn/multiScaleDeformableAttnPlugin.cpp
@@ -96,7 +96,7 @@ int32_t MultiScaleDeformableAttnPlugin::enqueue(
   switch (data_type) {
   case DataType::kFLOAT:
     ms_deformable_im2col_cuda<float>(
-        (float *)inputs[0], (int32_t *)inputs[1], (float *)inputs[2],
+        (float *)inputs[0], (TRT_INT *)inputs[1], (float *)inputs[2],
         (float *)inputs[3], (float *)inputs[4], batch, spatial_size, num_heads,
         channels, num_levels, num_query, num_point, points_per_group,
         (float *)outputs[0], stream);
@@ -104,13 +104,13 @@ int32_t MultiScaleDeformableAttnPlugin::enqueue(
   case DataType::kHALF:
     if (use_h2) {
       ms_deformable_im2col_cuda_h2(
-          (__half2 *)inputs[0], (int32_t *)inputs[1], (__half2 *)inputs[2],
+          (__half2 *)inputs[0], (TRT_INT *)inputs[1], (__half2 *)inputs[2],
           (__half2 *)inputs[3], (__half *)inputs[4], batch, spatial_size,
           num_heads, channels, num_levels, num_query, num_point,
           points_per_group, (__half2 *)outputs[0], stream);
     } else {
       ms_deformable_im2col_cuda<__half>(
-          (__half *)inputs[0], (int32_t *)inputs[1], (__half *)inputs[2],
+          (__half *)inputs[0], (TRT_INT *)inputs[1], (__half *)inputs[2],
           (__half *)inputs[3], (__half *)inputs[4], batch, spatial_size,
           num_heads, channels, num_levels, num_query, num_point,
           points_per_group, (__half *)outputs[0], stream);
@@ -119,14 +119,14 @@ int32_t MultiScaleDeformableAttnPlugin::enqueue(
   case DataType::kINT8:
     if (data_type_rp == DataType::kHALF) {
       ms_deformable_im2col_cuda_int8<__half2>(
-          (int8_4 *)inputs[0], scale_value, (int32_t *)inputs[1],
+          (int8_4 *)inputs[0], scale_value, (TRT_INT *)inputs[1],
           (__half2 *)inputs[2], (int8_4 *)inputs[3], scale_offset,
           (int8_4 *)inputs[4], scale_weight, batch, spatial_size, num_heads,
           channels, num_levels, num_query, num_point, points_per_group,
           (int8_4 *)outputs[0], scale_out, stream);
     } else {
       ms_deformable_im2col_cuda_int8<float>(
-          (int8_4 *)inputs[0], scale_value, (int32_t *)inputs[1],
+          (int8_4 *)inputs[0], scale_value, (TRT_INT *)inputs[1],
           (float *)inputs[2], (int8_4 *)inputs[3], scale_offset,
           (int8_4 *)inputs[4], scale_weight, batch, spatial_size, num_heads,
           channels, num_levels, num_query, num_point, points_per_group,
@@ -163,7 +163,7 @@ bool MultiScaleDeformableAttnPlugin::supportsFormatCombination(
            (inOut[pos].type == nvinfer1::DataType::kINT8 &&
             inOut[pos].format == nvinfer1::TensorFormat::kLINEAR && use_int8);
   case 1:
-    return inOut[pos].type == nvinfer1::DataType::kINT32 &&
+    return inOut[pos].type == TRT_kINT && 
            inOut[pos].format == nvinfer1::TensorFormat::kLINEAR;
   case 2:
     if (inOut[0].type == nvinfer1::DataType::kFLOAT ||
diff --git a/TensorRT/plugin/multi_scale_deformable_attn/multiScaleDeformableAttnPlugin.h b/TensorRT/plugin/multi_scale_deformable_attn/multiScaleDeformableAttnPlugin.h
index c93610b..069c358 100644
--- a/TensorRT/plugin/multi_scale_deformable_attn/multiScaleDeformableAttnPlugin.h
+++ b/TensorRT/plugin/multi_scale_deformable_attn/multiScaleDeformableAttnPlugin.h
@@ -10,6 +10,14 @@
 #include <NvInferPlugin.h>
 #include <string>
 #include <vector>
+#include <type_traits>
+
+#if NV_TENSORRT_MAJOR < 10
+  #define TRT_kINT nvinfer1::DataType::kINT32
+#else
+  #define TRT_kINT nvinfer1::DataType::kINT64
+#endif
+typedef std::conditional<NV_TENSORRT_MAJOR<10, int32_t, int64_t>::type TRT_INT;
 
 namespace trt_plugin {
 
diff --git a/TensorRT/plugin/rotate/rotateKernel.cu b/TensorRT/plugin/rotate/rotateKernel.cu
index 379b7cc..71e1f9f 100644
--- a/TensorRT/plugin/rotate/rotateKernel.cu
+++ b/TensorRT/plugin/rotate/rotateKernel.cu
@@ -706,7 +706,7 @@ __global__ void rotateKernel_int8(const int nthreads, int8_4 *output,
 }
 
 template <typename T>
-void rotate(T *output, T *input, T *angle, T *center, int *input_dims,
+void rotate(T *output, T *input, T *angle, T *center, TRT_INT_TYPE *input_dims,
             RotateInterpolation interp, cudaStream_t stream) {
   int channel = input_dims[0];
   int height = input_dims[1];
@@ -719,7 +719,7 @@ void rotate(T *output, T *input, T *angle, T *center, int *input_dims,
 }
 
 void rotate_h2(__half2 *output, __half2 *input, __half *angle, __half *center,
-               int *input_dims, RotateInterpolation interp,
+               TRT_INT_TYPE *input_dims, RotateInterpolation interp,
                cudaStream_t stream) {
   int channel = input_dims[0];
   int height = input_dims[1];
@@ -734,7 +734,7 @@ void rotate_h2(__half2 *output, __half2 *input, __half *angle, __half *center,
 template <typename T>
 void rotate_int8(int8_4 *output, float scale_o, const int8_4 *input,
                  float scale_i, const T *angle, const T *center,
-                 int *input_dims, RotateInterpolation interp,
+                 TRT_INT_TYPE *input_dims, RotateInterpolation interp,
                  cudaStream_t stream) {
   int channel = input_dims[0];
   int height = input_dims[1];
@@ -748,19 +748,19 @@ void rotate_int8(int8_4 *output, float scale_o, const int8_4 *input,
 }
 
 template void rotate(float *output, float *input, float *angle, float *center,
-                     int *input_dims, RotateInterpolation interp,
+                     TRT_INT_TYPE *input_dims, RotateInterpolation interp,
                      cudaStream_t stream);
 
 template void rotate(__half *output, __half *input, __half *angle,
-                     __half *center, int *input_dims,
+                     __half *center, TRT_INT_TYPE *input_dims,
                      RotateInterpolation interp, cudaStream_t stream);
 
 template void rotate_int8(int8_4 *output, float scale_o, const int8_4 *input,
                           float scale_i, const float *angle,
-                          const float *center, int *input_dims,
+                          const float *center, TRT_INT_TYPE *input_dims,
                           RotateInterpolation interp, cudaStream_t stream);
 
 template void rotate_int8(int8_4 *output, float scale_o, const int8_4 *input,
                           float scale_i, const __half *angle,
-                          const __half *center, int *input_dims,
+                          const __half *center, TRT_INT_TYPE *input_dims,
                           RotateInterpolation interp, cudaStream_t stream);
diff --git a/TensorRT/plugin/rotate/rotateKernel.h b/TensorRT/plugin/rotate/rotateKernel.h
index d5808b9..5354f5b 100644
--- a/TensorRT/plugin/rotate/rotateKernel.h
+++ b/TensorRT/plugin/rotate/rotateKernel.h
@@ -8,21 +8,25 @@
 #include "cuda_int8.h"
 #include <cuda_fp16.h>
 #include <cuda_runtime.h>
+#include <NvInfer.h>
+#include <type_traits>
+
+typedef std::conditional<NV_TENSORRT_MAJOR<10, int, int64_t>::type TRT_INT_TYPE;
 
 enum class RotateInterpolation { Bilinear, Nearest };
 
 template <typename T>
-void rotate(T *output, T *input, T *angle, T *center, int *input_dims,
+void rotate(T *output, T *input, T *angle, T *center, TRT_INT_TYPE *input_dims,
             RotateInterpolation interp, cudaStream_t stream);
 
 void rotate_h2(__half2 *output, __half2 *input, __half *angle, __half *center,
-               int *input_dims, RotateInterpolation interp,
+               TRT_INT_TYPE *input_dims, RotateInterpolation interp,
                cudaStream_t stream);
 
 template <typename T>
 void rotate_int8(int8_4 *output, float scale_o, const int8_4 *input,
                  float scale_i, const T *angle, const T *center,
-                 int *input_dims, RotateInterpolation interp,
+                 TRT_INT_TYPE *input_dims, RotateInterpolation interp,
                  cudaStream_t stream);
 
 #endif // TENSORRT_OPS_ROTATEKERNEL_H
